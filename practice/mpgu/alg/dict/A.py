# У банка есть клиенты. Каждый клиент имеет ровно один счет.

# Напишите программу (обязательно с использованием ассоциативного массива), 
# которая будет выполнять последовательность запросов таких двух видов:

# 1) начинается с числа 1, затем через пробел следует имя клиента (слово из латинских букв), 
# далее через пробел идет сумма денег, которая прилагается к счету текущего клиента 
# (целое число, не превышает по модулю 10000).
# 3
# 2) начинается с числа 2, через пробел следует имя клиента. На каждый такой запрос программа 
# должна ответить какая сумма в данный момент есть на счету заданного клиента.
# Если такое имя клиента пока ни разу не упоминалось в запросах вида 1, выводите вместо числа слово ERROR.

# В начале работы программы у всех клиентов на счету 0. Затем суммы могут становиться как 
# положительными, так и отрицательными.

# Обратите внимание, что в ситуации, когда клиент снял суммарно ровно столько же денег, 
# сколько положил, сумма на счете становится равной 0; но, раз его имя уже встречалось, 
# нулевое значение не является основанием выводить ERROR.

# Входные данные
# Первая строка стандартного входного потока — количество запросов N (1 < N < 100000). 
# Далее следуют N строк в каждой из которых описан один из двух описанных выше видов запроса.
n = int(input())
clients = {}

for i in range(n):
    request = input()
    op = request[0]
    if op == '1':
        clean_request = request[1:].split()
        print(clean_request)
        clients[clean_request[0]] = clean_request[1]
    elif op == '2':
        clean_request = request[1:].split()
        for i in clients:
            print("HERE", clients[i], clean_request[0])
            if clean_request[0] in clients[i]:
                print(clients[i].get())
                print('sdf')
            # else:
            #     print('ERROR')
        # clients[clean_request[0]] = clean_request[1]

print(clients)

# Выходные данные
# На каждый запрос 2-го вида нужно вывести текущее значение на счету заданного клиента (или слово ERROR).

# Примеры
# входные данные
# 7
# 1 asdf 3
# 1 zxcv 5
# 2 asdf
# 1 asdf -2
# 2 asdf
# 2 lalala
# 2 zxcv
# выходные данные
# 3
# 1
# ERROR
# 5